name: Azure Static Web Apps - Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      working-directory: frontend
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Run comprehensive tests
      working-directory: frontend
      run: |
        npm run test:unit -- --run
        npm run test:integration -- --run
        npm run test:coverage -- --run

    - name: Run linting and type checking
      working-directory: frontend
      run: |
        npx eslint .
        # npm run type-check  # Add if using TypeScript

    - name: Security audit
      working-directory: frontend
      run: npm audit --audit-level=moderate

    - name: Build application for production
      working-directory: frontend
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL_PRODUCTION || 'http://localhost:8000' }}
        VITE_ENVIRONMENT: production
        NODE_ENV: production
      run: npm run build

    - name: Optimize build for Azure Static Web Apps
      working-directory: frontend
      run: |
        # Remove unnecessary files to reduce file count and size
        find dist -name "*.map" -type f -delete
        find dist -name "*.txt" -type f -delete
        find dist -name ".DS_Store" -type f -delete
        find dist -name "*.log" -type f -delete
        
        # Log detailed build statistics
        echo "=== Build Statistics ==="
        echo "Total files: $(find dist -type f | wc -l)"
        echo "Total size: $(du -sh dist/)"
        echo "Directory breakdown:"
        du -sh dist/*/ 2>/dev/null || true
        echo "Largest files:"
        find dist -type f -exec ls -lah {} \; | sort -k5 -hr | head -15
        
        # Verify file count is within Azure limits
        FILE_COUNT=$(find dist -type f | wc -l)
        echo "File count: $FILE_COUNT"
        if [ $FILE_COUNT -gt 15000 ]; then
          echo "‚ùå Error: File count ($FILE_COUNT) exceeds recommended Azure Static Web Apps limit"
          exit 1
        fi
        
        # Verify total size
        TOTAL_SIZE_MB=$(du -sm dist/ | cut -f1)
        echo "Total size: ${TOTAL_SIZE_MB}MB"
        if [ $TOTAL_SIZE_MB -gt 250 ]; then
          echo "‚ö†Ô∏è Warning: Build size (${TOTAL_SIZE_MB}MB) is large for Azure Static Web Apps"
        fi

    - name: Deploy to Azure Static Web Apps
      id: builddeploy
      if: ${{ env.AZURE_TOKEN != '' }}
      uses: Azure/static-web-apps-deploy@v1
      env:
        AZURE_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PRODUCTION }}
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PRODUCTION }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "frontend"
        output_location: "dist"
        api_location: ""
        skip_app_build: true

    - name: Post-deployment verification
      run: |
        echo "Deployment completed successfully"
        echo "Static Web App URL: ${{ steps.builddeploy.outputs.static_web_app_url }}"
        
        # Wait for deployment to be live
        sleep 30
        
        # Basic smoke test (optional)
        # curl -f ${{ steps.builddeploy.outputs.static_web_app_url }} || exit 1

    - name: Create deployment summary
      run: |
        echo "## üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${GITHUB_REF#refs/tags/}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Static Web App URL**: ${{ steps.builddeploy.outputs.static_web_app_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

  notify_deployment:
    runs-on: ubuntu-latest
    needs: build_and_deploy_job
    if: always()
    
    steps:
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ needs.build_and_deploy_job.result }}
        text: |
          üöÄ Frontend deployment to production: ${{ needs.build_and_deploy_job.result }}
          
          Version: ${{ steps.version.outputs.VERSION }}
          Environment: Production
          Static Web App: Azure Static Web Apps
          
          Repository: ${{ github.repository }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify on failure
      if: needs.build_and_deploy_job.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ‚ùå URGENT: Production frontend deployment failed!
          
          Version: ${{ steps.version.outputs.VERSION }}
          Repository: ${{ github.repository }}
          Action: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Please investigate immediately.
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}