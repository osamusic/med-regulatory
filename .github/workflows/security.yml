name: Weekly Security Scan

on:
  schedule:
    # Run weekly security scans on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  comprehensive-security-scan:
    name: Comprehensive Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install security tools
        run: |
          pip install safety pip-licenses
          npm install -g license-checker

      # Deep dependency vulnerability scanning
      - name: Python dependency security scan
        working-directory: backend
        run: |
          pip install -r requirements.txt
          safety check -r requirements.txt --json --output python-security-detailed.json || true
          pip-licenses --format=json --output-file=python-licenses.json

      - name: Node.js dependency security scan
        working-directory: frontend
        run: |
          npm ci
          npm audit --audit-level=low --json > nodejs-security-detailed.json || true
          license-checker --json --out nodejs-licenses.json

      # Advanced static analysis
      - name: Run Semgrep SAST
        if: ${{ env.SEMGREP_TOKEN != '' }}
        uses: returntocorp/semgrep-action@v1
        env:
          SEMGREP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/python
            p/javascript
            p/docker

      # Secrets scanning
      - name: Deep secrets scan with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      # Container security analysis
      - name: Build images for security scanning
        run: |
          # Build images with consistent tags for security scanning
          docker build -t medshield-backend:security-scan ./backend
          docker build -t medshield-frontend:security-scan ./frontend
          
          # Verify images were built successfully
          docker images | grep medshield

      - name: Comprehensive container scan - Backend
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'medshield-backend:security-scan'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Comprehensive container scan - Frontend
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'medshield-frontend:security-scan'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

      # Infrastructure as Code security
      - name: Infrastructure security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,yaml,github_actions
          output_format: cli
          quiet: true

      # Upload all security reports
      - name: Upload comprehensive security reports
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-reports
          path: |
            backend/python-security-detailed.json
            backend/python-licenses.json
            frontend/nodejs-security-detailed.json
            frontend/nodejs-licenses.json
          retention-days: 30

      # Create security issue if critical vulnerabilities found
      - name: Parse security results and create issue
        if: always()
        run: |
          # Check for critical vulnerabilities and create GitHub issue if found
          # This is a placeholder for advanced security issue automation
          echo "Security scan completed. Review artifacts for detailed results."